//----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace Std
{
    public unsafe partial class Lockit
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public int _Locktype;
        }
    }
}

namespace Std
{
    public unsafe partial class ExceptionPtr
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr _Data1;

            [FieldOffset(4)]
            public global::System.IntPtr _Data2;
        }
    }
}

public unsafe partial class StdExceptionData
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        public global::System.IntPtr _What;

        [FieldOffset(4)]
        public byte _DoFree;
    }
}

namespace Std
{
}

namespace Std
{
    namespace CompressedPair
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S__Wrap_alloc____N_std_S_allocator__C___N_std_S__Vector_val____N_std_S__Simple_types__C_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_default_delete____N_Gosu_S_File_S_Impl__S1__Vb1
        {
            [FieldOffset(0)]
            public global::System.IntPtr _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S__Wrap_alloc____N_std_S_allocator__W___N_std_S__String_val____N_std_S__Simple_types__W_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.StringVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_default_delete____N_Gosu_S_Song_S_BaseData__S1__Vb1
        {
            [FieldOffset(0)]
            public global::System.IntPtr _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S__Wrap_alloc____N_std_S_allocator__C___N_std_S__String_val____N_std_S__Simple_types__C_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.StringVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S__Wrap_alloc____N_std_S_allocator__q___N_std_S__String_val____N_std_S__Simple_types__q_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.StringVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S__Wrap_alloc____N_std_S_allocator__w___N_std_S__String_val____N_std_S__Simple_types__w_Vb1
        {
            [FieldOffset(0)]
            internal global::Std.StringVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_default_delete____N_Gosu_S_Graphics_S_Impl__S1__Vb1
        {
            [FieldOffset(0)]
            public global::System.IntPtr _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S__Wrap_alloc____N_std_S_allocator____N_Gosu_S_Color___N_std_S__Vector_val____N_std_S__Simple_types__S2__Vb1
        {
            [FieldOffset(0)]
            internal global::Std.VectorVal.__Internal _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_default_delete____N_Gosu_S_TextInput_S_Impl__S1__Vb1
        {
            [FieldOffset(0)]
            public global::System.IntPtr _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_default_delete____N_Gosu_S_Input_S_Impl__S1__Vb1
        {
            [FieldOffset(0)]
            public global::System.IntPtr _Myval2;
        }

        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public unsafe partial struct __Internalc__N_std_S__Compressed_pair____N_std_S_default_delete____N_Gosu_S_Window_S_Impl__S1__Vb1
        {
            [FieldOffset(0)]
            public global::System.IntPtr _Myval2;
        }
    }

    namespace Yarn
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public unsafe partial struct __Internalc__N_std_S__Yarn__C
        {
            [FieldOffset(0)]
            public global::System.IntPtr _Myptr;

            [FieldOffset(4)]
            public sbyte _Nul;
        }

        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public unsafe partial struct __Internalc__N_std_S__Yarn__W
        {
            [FieldOffset(0)]
            public global::System.IntPtr _Myptr;

            [FieldOffset(4)]
            public char _Nul;
        }
    }
}

namespace Std
{
    public unsafe partial class Allocator : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public unsafe partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("Std-templates", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="??0?$allocator@D@std@@QAE@XZ")]
            internal static extern global::System.IntPtr ctor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Allocator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Allocator>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static Allocator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new Allocator(native.ToPointer(), skipVTables);
        }

        public static Allocator __CreateInstance(Allocator.__Internal native, bool skipVTables = false)
        {
            return new Allocator(native, skipVTables);
        }

        private static void* __CopyValue(Allocator.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(Allocator.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Allocator(Allocator.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Allocator(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Allocator()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            global::Std.Allocator __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }


    public unsafe partial class Rebind
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }
    }
}

namespace Std
{
}

public unsafe partial class StdTypeInfoData
{
    [StructLayout(LayoutKind.Explicit, Size = 8)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        public global::System.IntPtr _UndecoratedName;

        [FieldOffset(4)]
        public fixed sbyte _DecoratedName[1];
    }
}

namespace Std
{
    namespace UniquePtr
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S_default_delete____N_Gosu_S_File_S_Impl__S1__Vb1 _Mypair;
        }
    }

    namespace SharedPtr
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr _Ptr;

            [FieldOffset(4)]
            public global::System.IntPtr _Rep;
        }
    }
}

namespace Std
{
    namespace StringVal
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.StringVal.Bxty.__Internal _Bx;

            [FieldOffset(16)]
            public uint _Mysize;

            [FieldOffset(20)]
            public uint _Myres;
        }


        public unsafe partial struct Bxty
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
            }
        }
    }
}

public unsafe partial class Ctypevec
{
    [StructLayout(LayoutKind.Explicit, Size = 16)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        public uint _Page;

        [FieldOffset(4)]
        public global::System.IntPtr _Table;

        [FieldOffset(8)]
        public int _Delfl;

        [FieldOffset(12)]
        public global::System.IntPtr _LocaleName;
    }
}

public unsafe partial class Cvtvec
{
    [StructLayout(LayoutKind.Explicit, Size = 44)]
    public partial struct __Internal
    {
        [FieldOffset(0)]
        public uint _Page;

        [FieldOffset(4)]
        public uint _Mbcurmax;

        [FieldOffset(8)]
        public int _Isclocale;

        [FieldOffset(12)]
        public fixed byte _Isleadbyte[32];

        [FieldOffset(13)]
        public byte __dummy__Isleadbyte_1;

        [FieldOffset(14)]
        public byte __dummy__Isleadbyte_2;

        [FieldOffset(15)]
        public byte __dummy__Isleadbyte_3;

        [FieldOffset(16)]
        public byte __dummy__Isleadbyte_4;

        [FieldOffset(17)]
        public byte __dummy__Isleadbyte_5;

        [FieldOffset(18)]
        public byte __dummy__Isleadbyte_6;

        [FieldOffset(19)]
        public byte __dummy__Isleadbyte_7;

        [FieldOffset(20)]
        public byte __dummy__Isleadbyte_8;

        [FieldOffset(21)]
        public byte __dummy__Isleadbyte_9;

        [FieldOffset(22)]
        public byte __dummy__Isleadbyte_10;

        [FieldOffset(23)]
        public byte __dummy__Isleadbyte_11;

        [FieldOffset(24)]
        public byte __dummy__Isleadbyte_12;

        [FieldOffset(25)]
        public byte __dummy__Isleadbyte_13;

        [FieldOffset(26)]
        public byte __dummy__Isleadbyte_14;

        [FieldOffset(27)]
        public byte __dummy__Isleadbyte_15;

        [FieldOffset(28)]
        public byte __dummy__Isleadbyte_16;

        [FieldOffset(29)]
        public byte __dummy__Isleadbyte_17;

        [FieldOffset(30)]
        public byte __dummy__Isleadbyte_18;

        [FieldOffset(31)]
        public byte __dummy__Isleadbyte_19;

        [FieldOffset(32)]
        public byte __dummy__Isleadbyte_20;

        [FieldOffset(33)]
        public byte __dummy__Isleadbyte_21;

        [FieldOffset(34)]
        public byte __dummy__Isleadbyte_22;

        [FieldOffset(35)]
        public byte __dummy__Isleadbyte_23;

        [FieldOffset(36)]
        public byte __dummy__Isleadbyte_24;

        [FieldOffset(37)]
        public byte __dummy__Isleadbyte_25;

        [FieldOffset(38)]
        public byte __dummy__Isleadbyte_26;

        [FieldOffset(39)]
        public byte __dummy__Isleadbyte_27;

        [FieldOffset(40)]
        public byte __dummy__Isleadbyte_28;

        [FieldOffset(41)]
        public byte __dummy__Isleadbyte_29;

        [FieldOffset(42)]
        public byte __dummy__Isleadbyte_30;

        [FieldOffset(43)]
        public byte __dummy__Isleadbyte_31;
    }
}

namespace Std
{
    [Flags]
    public enum CodecvtMode
    {
        ConsumeHeader = 4,
        GenerateHeader = 2
    }
}

namespace Std
{
    public unsafe partial class ErrorCode
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            public int _Myval;

            [FieldOffset(4)]
            public global::System.IntPtr _Mycat;
        }
    }
}

namespace Std
{
    namespace Literals
    {
    }
}

namespace Std
{
    namespace Vector
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.CompressedPair.__Internalc__N_std_S__Compressed_pair____N_std_S__Wrap_alloc____N_std_S_allocator__C___N_std_S__Vector_val____N_std_S__Simple_types__C_Vb1 _Mypair;
        }
    }

    namespace VectorVal
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr _Myfirst;

            [FieldOffset(4)]
            public global::System.IntPtr _Mylast;

            [FieldOffset(8)]
            public global::System.IntPtr _Myend;
        }
    }
}

namespace Std
{
}

namespace Std
{
    namespace Function
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.FuncClass.Storage.__Internal _Mystorage;
        }
    }

    namespace FuncClass
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.FuncClass.Storage.__Internal _Mystorage;
        }


        public unsafe partial struct Storage
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
            }
        }
    }
}
